# https://phelipetls.github.io/posts/introduction-to-ansible/
- name: Bootstrap a local environment
  hosts: localhost
  become: no
  vars:
    user_id: "{{ ansible_user_id }}"

  tasks:
  - name: Install required packages on Ubuntu
    become: yes
    apt:
      name:
        - git
        - curl
        - fish
      state: latest
    when: ansible_distribution == "Ubuntu"

  # Install anyenv
  - name: Clone anyenv repository
    git:
      repo: "https://github.com/anyenv/anyenv"
      dest: "{{ ansible_env.HOME }}/.anyenv"
  - name: Check if the anyenv manifest directory exists
    stat:
      path: "{{ ansible_env.HOME }}/.config/anyenv/anyenv-install"
    register: anyenv_manifest_directory
  - name: Initialize anyenv
    command: "~/.anyenv/bin/anyenv install --force-init"
    when: not anyenv_manifest_directory.stat.exists
  ## rbenv
  - name: Install required packages on Ubuntu to use rbenv
    become: yes
    apt:
      name:
        # - ruby-dev # todo: probably unnecessary
        - libz-dev # fix an error "zlib.h" not found during rbenv install 2.7.7
      state: latest
    when: ansible_distribution == "Ubuntu"
  - name: Check if rbenv is already installed
    stat:
      path: "{{ ansible_env.HOME }}/.anyenv/envs/rbenv"
    register: rbenv_directory
  - name: Install rbenv
    command: "~/.anyenv/bin/anyenv install rbenv"
    when: not rbenv_directory.stat.exists

  # Prepare symbolic links at first
  - name: Ensure there is the $HOME/.config directory
    file:
      path: "{{ ansible_env.HOME }}/.config"
      state: directory
  - name: Create symbolic links for a $HOME/.config directory
    file:
      src: "{{ playbook_dir }}/static/common/.config/{{ item }}"
      dest: "{{ ansible_env.HOME }}/.config/{{ item  }}"
      state: link
    loop:
      - fish
      - git
      - tmux
      - tmuxinator
  - name: Create symbolic links for a $HOME/ directory
    file:
      src: "{{ playbook_dir }}/static/common/{{ item }}"
      dest: "{{ ansible_env.HOME }}/{{ item }}"
      state: link
    loop:
      - .composer
      - .ssh
      - bin
      - .editorconfig
      - .eslintrc.json
      - .gitconfig
      - .gitignore

  # Fish
  - name: Create a symbolic link for a $HOME/.config directory
    file:
      src: "{{ playbook_dir }}/static/common/.config/{{ item }}"
      dest: "{{ ansible_env.HOME }}/.config/{{ item  }}"
      state: link
    loop:
      - fish
  ## todo: Next step fails on check option
  - name: Download a fisher
    get_url:
      url: https://git.io/fisher
      dest: "{{ ansible_env.HOME }}/.config/fish/functions/fisher.fish"
  - name: Download fish plugins
    command:
      cmd: fish -c "fisher update"

  ## Change the default shell to fish
  - name: Get fish command path
    command: "which fish"
    register: fish_command_path
  - set_fact:
      fish_command_path: "{{ fish_command_path.stdout }}"
  - debug:
      msg: "Fish command path is {{ fish_command_path }}"
  - name: Check if a /etc/shells contains fish
    become: true
    lineinfile:
      dest: /etc/shells
      line: "{{ fish_command_path }}"
      state: present
  - name: Change the default user shell to fish
    become: true
    user:
      name: "{{ user_id }}"
      shell: "{{ fish_command_path }}"


# https://docs.ansible.com/ansible/2.7/user_guide/playbooks_best_practices.html#operating-system-and-distribution-variance
- name: Check current environments
  hosts: localhost
  gather_facts: yes
  tasks:
    - name: Classify a host depending on OS
      group_by:
        key: os_{{ ansible_facts['distribution'] }}

# MacOSX only
- hosts: os_MacOSX
  tasks:
    - name: Update homebrew formulae
      homebrew:
        update_homebrew: yes

    - name: Add homebrew taps
      homebrew_tap:
        name: "{{ item }}"
        state: present
      loop:
        - github/gh
        - golangci/tap
        - sourcegraph/src-cli

    - name: Install packages with homebrew cask
      homebrew_cask:
        name: "{{ item }}"
        state: present
      environment:
        HOMEBREW_CASK_OPTS: "--appdir=/Applications"
      ignore_errors: yes # highly likely this is because applications are already installed
      loop:
        - google-japanese-ime
        - appcleaner
        - emacs
        - slack
        - docker
        - google-chrome
        - alfred
        - spectacle
        - bettertouchtool
        - 1password
        - 1password-cli
        - goland
        - iterm2
        - google-cloud-sdk
        - dropbox

    - name: Install homebrew packages
      homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - gh
        - ghq

        - fish
        - fzf
        - tmux
        - tmuxinator
        - reattach-to-user-namespace

        - yq
        - jq
        - tree

        - go

        - kubernetes-cli
        - kubernetes-helm
        - kubie
        - istioctl
        - mycli

        - mas # https://github.com/mas-cli/mas


# Ubuntu only
- hosts: os_Ubuntu
  roles:
    - role: apt-repository.1password-cli
      become: yes
    - role: apt-repository.github-cli
      become: yes

  tasks:
    # Install for Ubuntu, regardless of WSL or non WSL
    - name: Update apt cache
      become: yes
      apt:
        update_cache: yes

    - name: Install application packages on Ubuntu
      become: yes
      apt:
        name:
          - 1password-cli
          - gh
          - fzf
          - tmux
          - golang-go
        state: latest

    # Prepare hosts based on WSL or non WSL
    - name: Check if running on WSL
      shell: "grep -q 'WSL' /proc/version && echo 'true' || echo 'false'"
      register: wsl_check

    - name: Set is_wsl fact
      set_fact:
        is_wsl: "{{ wsl_check.stdout == 'true' }}"
      when: wsl_check.rc == 0

    - name: Classify a host if it's WSL
      group_by:
        key: wsl_{{ ansible_facts['distribution'] }}
      when: is_wsl

    - name: Classify a host for non WSL distributions
      group_by:
        key: non_wsl_{{ ansible_facts['distribution'] }}
      when: not is_wsl

- hosts: wsl_Ubuntu
  tasks:
    - name: Install packages on WSL Ubuntu
      debug:
        msg: "There is no configuration yet"

- hosts: non_wsl_Ubuntu
  tasks:
    - name: Install Microk8s
      become: yes
      community.general.snap:
        name: microk8s
        classic: true
        channel: 1.26/stable
    - name: Install application packages on Ubuntu
      become: yes
      apt:
        name:
          - scrcpy # https://github.com/Genymobile/scrcpy
          - xsel # For tmux: https://github.com/tmux/tmux/wiki/Clipboard#how-to-configure---tmux-32-and-later
        state: latest
