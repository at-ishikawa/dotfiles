# https://phelipetls.github.io/posts/introduction-to-ansible/
- name: Bootstrap a local environment
  hosts: localhost
  become: no
  vars:
    user_id: "{{ ansible_user_id }}"

  tasks:
  # https://docs.ansible.com/ansible/2.7/user_guide/playbooks_best_practices.html#operating-system-and-distribution-variance
  - include_role:
      name: homebrew
    tags:
      - homebrew
      - iterm
    when: ansible_facts['distribution'] == "MacOSX"
  - include_role:
      name: apt
    when: ansible_facts['distribution'] == "Ubuntu"
  - include_role:
      name: golang
    tags:
      - golang

  - name: Install anyenv
    block:
    - name: Clone anyenv repository
      git:
        repo: "https://github.com/anyenv/anyenv"
        dest: "{{ ansible_env.HOME }}/.anyenv"
    - name: Check if the anyenv manifest directory exists
      stat:
        path: "{{ ansible_env.HOME }}/.config/anyenv/anyenv-install"
      register: anyenv_manifest_directory
    - name: Initialize anyenv
      command: "~/.anyenv/bin/anyenv install --force-init"
      when: not anyenv_manifest_directory.stat.exists
  - name: Install rbenv
    block:
    - name: Install required packages on Ubuntu to use rbenv
      become: yes
      apt:
        name:
          # - ruby-dev # todo: probably unnecessary
          - libz-dev # fix an error "zlib.h" not found during rbenv install 2.7.7
        state: latest
      when: ansible_distribution == "Ubuntu"
    - name: Check if rbenv is already installed
      stat:
        path: "{{ ansible_env.HOME }}/.anyenv/envs/rbenv"
      register: rbenv_directory
    - name: Install rbenv
      command: "~/.anyenv/bin/anyenv install rbenv"
      when: not rbenv_directory.stat.exists

  - name: Install pyenv
    tags:
      - pyenv
    block:
    - name: Check if pyenv is already installed
      stat:
        path: "{{ ansible_env.HOME }}/.anyenv/envs/pyenv"
      register: pyenv_directory
    - name: Install pyenv
      when: not pyenv_directory.stat.exists
      block:
        - name: Install required packages on Ubuntu
          become: yes
          apt:
            name:
              # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
              - build-essential
              - libssl-dev
              - zlib1g-dev
              - libbz2-dev
              - libreadline-dev
              - libsqlite3-dev
              - curl
              - git
              - libncursesw5-dev
              - xz-utils
              - tk-dev
              - libxml2-dev
              - libxmlsec1-dev
              - libffi-dev
              - liblzma-dev
            state: latest
          when: ansible_distribution == "Ubuntu"
        - name: Install pyenv
          command: "~/.anyenv/bin/anyenv install pyenv"

  - name: Create symbolic links
    block:
    - name: Ensure there is the $HOME/.config directory
      file:
        path: "{{ ansible_env.HOME }}/.config"
        state: directory
    - name: Create symbolic links for a $HOME/.config directory
      file:
        src: "{{ playbook_dir }}/static/common/.config/{{ item }}"
        dest: "{{ ansible_env.HOME }}/.config/{{ item  }}"
        state: link
      loop:
        - fish
        - git
        - tmux
        - tmuxinator
    - name: Create symbolic links for a $HOME/ directory
      file:
        src: "{{ playbook_dir }}/static/common/{{ item }}"
        dest: "{{ ansible_env.HOME }}/{{ item }}"
        state: link
      loop:
        - .ssh
        - bin
        - .editorconfig
        - .eslintrc.json
        - .gitconfig
        - .gitignore

  - name: Set up fish shell
    block:
    - name: Create a symbolic link for a $HOME/.config directory
      file:
        src: "{{ playbook_dir }}/static/common/.config/{{ item }}"
        dest: "{{ ansible_env.HOME }}/.config/{{ item  }}"
        state: link
      loop:
        - fish
    ## todo: Next step fails on check option
    - name: Download a fisher
      get_url:
        url: https://git.io/fisher
        dest: "{{ ansible_env.HOME }}/.config/fish/functions/fisher.fish"
    - name: Download fish plugins
      command:
        cmd: fish -c "fisher update"

    ## Change the default shell to fish
    - name: Get fish command path
      command: "which fish"
      register: fish_command_path
    - set_fact:
        fish_command_path: "{{ fish_command_path.stdout }}"
    - debug:
        msg: "Fish command path is {{ fish_command_path }}"
    - name: Check if a /etc/shells contains fish
      become: true
      lineinfile:
        dest: /etc/shells
        line: "{{ fish_command_path }}"
        state: present
    - name: Change the default user shell to fish
      become: true
      user:
        name: "{{ user_id }}"
        shell: "{{ fish_command_path }}"

  - name: Setup fish completion
    block:
      - name: gh completion
        command: gh completion -s fish > ~/.config/fish/completions/gh.fish

      - name: "{{ item }} completion"
        shell: "{{ item }} completion fish > ~/.config/fish/completions/{{ item }}.fish"
        with_items:
          - op
          - kubectl

  # - name: Auto update packages by this ansible
  #   become: true
  #   cron:
  #     name: "Run this playbook"
  #     special_time: "daily"
  #     job: "ansible-playbook {{ playbook_dir }}/bootstrap.yml"
